version: '3.1'

services:
  sqlite-browser:
    image: coleifer/sqlite-web
    restart: always
    environment:
      SQLITE_DATABASE: /data/notebook.db
    volumes:
      - ./database/notebook.db:/data/notebook.db
    ports:
      - "9105:8080"
    profiles:
      - sqlite

  mysql:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: notebook
      TZ: Asia/Shanghai
    ports:
      - "9106:3306"
    command:
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
    healthcheck:
      test: ["CMD-SHELL", "curl --silent localhost:3306 >/dev/null || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - notebook-server
    profiles:
      - mysql

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - "9107:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
      test: ["CMD", "curl --silent localhost:80 >/dev/null || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - notebook-server
    depends_on:
      - mysql
    profiles:
      - mysql

  inngest:
    image: inngest/inngest
    command: 'inngest dev -u http://host.docker.internal:9001/inngest'
    ports:
      - '9108:8288'
    extra_hosts:
      - host.docker.internal:host-gateway

  openapi-generator:
    image: openapitools/openapi-generator-cli
    volumes:
#      - ./openapi.yaml:/local/openapi.yaml:ro
      - ../web/api-generated:/local/generated
    command:
      - generate
      - -i
      - /local/openapi.yaml
      - -g
      - typescript-axios
      - -o
      - /local/generated
      - --skip-validate-spec
      - --additional-properties
      - apiPackage=clients,modelPackage=models,withoutPrefixEnums=true,withSeparateModelsAndApi=true
    develop:
      watch:
        - action: sync+restart
          path: ./openapi.yaml
          target: /local/openapi.yaml

  minio:
    image: minio/minio
    restart: always
    ports:
      - "9109:9000"
      - "9101:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - notebook-server

networks:
  notebook-server:

volumes:
  mysql_data: