/* tslint:disable */
/* eslint-disable */
/**
 * Notebook Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FlowAddInput } from '../models';
// @ts-ignore
import type { FlowAddResponse } from '../models';
// @ts-ignore
import type { FlowDeleteResponse } from '../models';
// @ts-ignore
import type { FlowEntity } from '../models';
// @ts-ignore
import type { FlowListResponse } from '../models';
// @ts-ignore
import type { FlowPatchInput } from '../models';
/**
 * FlowApi - axios parameter creator
 * @export
 */
export const FlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FlowAddInput} flowAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFlow: async (flowAddInput: FlowAddInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowAddInput' is not null or undefined
            assertParamExists('addFlow', 'flowAddInput', flowAddInput)
            const localVarPath = `/flow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flowAddInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlow: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFlow', 'id', id)
            const localVarPath = `/flow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFlows: async (pageSize?: number, pageNumber?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/flow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlow: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFlow', 'id', id)
            const localVarPath = `/flow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FlowPatchInput} flowPatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFlow: async (id: number, flowPatchInput: FlowPatchInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchFlow', 'id', id)
            // verify required parameter 'flowPatchInput' is not null or undefined
            assertParamExists('patchFlow', 'flowPatchInput', flowPatchInput)
            const localVarPath = `/flow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flowPatchInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowApi - functional programming interface
 * @export
 */
export const FlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FlowAddInput} flowAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFlow(flowAddInput: FlowAddInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFlow(flowAddInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.addFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFlow(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFlow(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.deleteFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFlows(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFlows(pageSize, pageNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.getAllFlows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlow(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlow(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.getFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {FlowPatchInput} flowPatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFlow(id: number, flowPatchInput: FlowPatchInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFlow(id, flowPatchInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FlowApi.patchFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FlowApi - factory interface
 * @export
 */
export const FlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlowApiFp(configuration)
    return {
        /**
         * 
         * @param {FlowAddInput} flowAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFlow(flowAddInput: FlowAddInput, options?: RawAxiosRequestConfig): AxiosPromise<FlowAddResponse> {
            return localVarFp.addFlow(flowAddInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlow(id: number, options?: RawAxiosRequestConfig): AxiosPromise<FlowDeleteResponse> {
            return localVarFp.deleteFlow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFlows(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<FlowListResponse> {
            return localVarFp.getAllFlows(pageSize, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlow(id: number, options?: RawAxiosRequestConfig): AxiosPromise<FlowEntity> {
            return localVarFp.getFlow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {FlowPatchInput} flowPatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFlow(id: number, flowPatchInput: FlowPatchInput, options?: RawAxiosRequestConfig): AxiosPromise<FlowEntity> {
            return localVarFp.patchFlow(id, flowPatchInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlowApi - object-oriented interface
 * @export
 * @class FlowApi
 * @extends {BaseAPI}
 */
export class FlowApi extends BaseAPI {
    /**
     * 
     * @param {FlowAddInput} flowAddInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public addFlow(flowAddInput: FlowAddInput, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).addFlow(flowAddInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public deleteFlow(id: number, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).deleteFlow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageSize] 
     * @param {number} [pageNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public getAllFlows(pageSize?: number, pageNumber?: number, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).getAllFlows(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public getFlow(id: number, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).getFlow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {FlowPatchInput} flowPatchInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public patchFlow(id: number, flowPatchInput: FlowPatchInput, options?: RawAxiosRequestConfig) {
        return FlowApiFp(this.configuration).patchFlow(id, flowPatchInput, options).then((request) => request(this.axios, this.basePath));
    }
}

