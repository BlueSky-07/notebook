/* tslint:disable */
/* eslint-disable */
/**
 * Notebook Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BatchNodeAddInput } from '../models';
// @ts-ignore
import type { BatchNodeAddResponse } from '../models';
// @ts-ignore
import type { BatchNodeDeleteInput } from '../models';
// @ts-ignore
import type { BatchNodePatchInput } from '../models';
// @ts-ignore
import type { NodeAddInput } from '../models';
// @ts-ignore
import type { NodeAddResponse } from '../models';
// @ts-ignore
import type { NodeDeleteResponse } from '../models';
// @ts-ignore
import type { NodeEntity } from '../models';
// @ts-ignore
import type { NodePatchInput } from '../models';
/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NodeAddInput} nodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode: async (nodeAddInput: NodeAddInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeAddInput' is not null or undefined
            assertParamExists('addNode', 'nodeAddInput', nodeAddInput)
            const localVarPath = `/node`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeAddInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchNodeAddInput} batchNodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNodes: async (batchNodeAddInput: BatchNodeAddInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchNodeAddInput' is not null or undefined
            assertParamExists('addNodes', 'batchNodeAddInput', batchNodeAddInput)
            const localVarPath = `/node/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchNodeAddInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNode', 'id', id)
            const localVarPath = `/node/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchNodeDeleteInput} batchNodeDeleteInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNodes: async (batchNodeDeleteInput: BatchNodeDeleteInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchNodeDeleteInput' is not null or undefined
            assertParamExists('deleteNodes', 'batchNodeDeleteInput', batchNodeDeleteInput)
            const localVarPath = `/node/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchNodeDeleteInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNode: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNode', 'id', id)
            const localVarPath = `/node/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes: async (id: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNodes', 'id', id)
            const localVarPath = `/node/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {NodePatchInput} nodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNode: async (id: number, nodePatchInput: NodePatchInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchNode', 'id', id)
            // verify required parameter 'nodePatchInput' is not null or undefined
            assertParamExists('patchNode', 'nodePatchInput', nodePatchInput)
            const localVarPath = `/node/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodePatchInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchNodePatchInput} batchNodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNodes: async (batchNodePatchInput: BatchNodePatchInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchNodePatchInput' is not null or undefined
            assertParamExists('patchNodes', 'batchNodePatchInput', batchNodePatchInput)
            const localVarPath = `/node/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchNodePatchInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {NodeAddInput} nodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNode(nodeAddInput: NodeAddInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNode(nodeAddInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.addNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BatchNodeAddInput} batchNodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNodes(batchNodeAddInput: BatchNodeAddInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchNodeAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNodes(batchNodeAddInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.addNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNode(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNode(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.deleteNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BatchNodeDeleteInput} batchNodeDeleteInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNodes(batchNodeDeleteInput: BatchNodeDeleteInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNodes(batchNodeDeleteInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.deleteNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNode(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNode(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodes(id: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodes(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {NodePatchInput} nodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchNode(id: number, nodePatchInput: NodePatchInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNode(id, nodePatchInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.patchNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BatchNodePatchInput} batchNodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchNodes(batchNodePatchInput: BatchNodePatchInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNodes(batchNodePatchInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.patchNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeApiFp(configuration)
    return {
        /**
         * 
         * @param {NodeAddInput} nodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(nodeAddInput: NodeAddInput, options?: RawAxiosRequestConfig): AxiosPromise<NodeAddResponse> {
            return localVarFp.addNode(nodeAddInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BatchNodeAddInput} batchNodeAddInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNodes(batchNodeAddInput: BatchNodeAddInput, options?: RawAxiosRequestConfig): AxiosPromise<BatchNodeAddResponse> {
            return localVarFp.addNodes(batchNodeAddInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode(id: number, options?: RawAxiosRequestConfig): AxiosPromise<NodeDeleteResponse> {
            return localVarFp.deleteNode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BatchNodeDeleteInput} batchNodeDeleteInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNodes(batchNodeDeleteInput: BatchNodeDeleteInput, options?: RawAxiosRequestConfig): AxiosPromise<NodeDeleteResponse> {
            return localVarFp.deleteNodes(batchNodeDeleteInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNode(id: number, options?: RawAxiosRequestConfig): AxiosPromise<NodeEntity> {
            return localVarFp.getNode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes(id: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<NodeEntity>> {
            return localVarFp.getNodes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {NodePatchInput} nodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNode(id: number, nodePatchInput: NodePatchInput, options?: RawAxiosRequestConfig): AxiosPromise<NodeEntity> {
            return localVarFp.patchNode(id, nodePatchInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BatchNodePatchInput} batchNodePatchInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNodes(batchNodePatchInput: BatchNodePatchInput, options?: RawAxiosRequestConfig): AxiosPromise<Array<NodeEntity>> {
            return localVarFp.patchNodes(batchNodePatchInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI {
    /**
     * 
     * @param {NodeAddInput} nodeAddInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public addNode(nodeAddInput: NodeAddInput, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).addNode(nodeAddInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BatchNodeAddInput} batchNodeAddInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public addNodes(batchNodeAddInput: BatchNodeAddInput, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).addNodes(batchNodeAddInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public deleteNode(id: number, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).deleteNode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BatchNodeDeleteInput} batchNodeDeleteInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public deleteNodes(batchNodeDeleteInput: BatchNodeDeleteInput, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).deleteNodes(batchNodeDeleteInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getNode(id: number, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getNode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getNodes(id: Array<string>, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getNodes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {NodePatchInput} nodePatchInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public patchNode(id: number, nodePatchInput: NodePatchInput, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).patchNode(id, nodePatchInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BatchNodePatchInput} batchNodePatchInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public patchNodes(batchNodePatchInput: BatchNodePatchInput, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).patchNodes(batchNodePatchInput, options).then((request) => request(this.axios, this.basePath));
    }
}

